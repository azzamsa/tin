name: CI

on: [push, pull_request]

jobs:
  code_quality:
    name: Code quality
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt

      - uses: taiki-e/install-action@just
      - uses: taiki-e/install-action@dprint
      - uses: taiki-e/install-action@typos
      - uses: taiki-e/install-action@v2
        with:
          tool: hurlfmt

      - name: Show version information
        shell: bash
        run: |
          rustc --version
          cargo --version
          cargo fmt --version

      - name: Ensure `fmt` has been run
        run: just fmt-check

      - name: Run clippy
        env:
          SQLX_OFFLINE: true
        run: just lint

  msrv:
    name: Minimum supported rust version
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - uses: taiki-e/install-action@nextest
      - uses: taiki-e/install-action@just

      - name: Prepare the environment variables
        run: |
          cp .example.env .env

      - name: Prepare the database
        env:
          PGPASSWORD: secret
        run: |
          docker compose --file ./tests/compose.yml run --detach -p 5432:5432 --name postgres_db postgres_db
          # Wait until the DB is up
          docker exec postgres_db bash -c "until pg_isready; do sleep 1; done"
          # Check DB version
          docker exec postgres_db psql -h localhost -p 5432 -U gandalf --version

      - name: Show version information
        shell: bash
        run: |
          rustc --version
          cargo --version

      - name: Run tests
        env:
          DATABASE_URL: postgres://gandalf:SpeakFriendAndEnter@localhost:5432/tin
        run: just test

  build:
    name: Build for ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {
              build: linux-gnu,
              os: ubuntu-24.04,
              target: x86_64-unknown-linux-gnu,
            }
          # `sfackler/rust-openssl` needs more effort to compile to musl
          # - { build: linux-musl, os: ubuntu-22.04, target: x86_64-unknown-linux-musl   }
          - { build: win-gnu, os: windows-2025, target: x86_64-pc-windows-gnu }
          - {
              build: win-msvc,
              os: windows-2025,
              target: x86_64-pc-windows-msvc,
            }
          - {
              build: win32-msvc,
              os: windows-2025,
              target: i686-pc-windows-msvc,
            }
          - { build: macos, os: macos-15, target: x86_64-apple-darwin }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Show version information
        shell: bash
        run: |
          rustc --version
          cargo --version

      - name: Install musl-tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            --allow-unauthenticated musl-tools

      - name: Build
        run: cargo build --release --locked --target ${{ matrix.target }}
